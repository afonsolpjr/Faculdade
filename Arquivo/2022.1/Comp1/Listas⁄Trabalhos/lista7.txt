/*
Olá, tudo bem? 
Fiz algumas mudanças no formato da entrega, creio que será útil.
Se for o caso de ter atrapalhado mais que ajudado,desculpe-me e por favor comente ao corrigir.

O que fiz foi:
-Todos os exercícios estão como funções.
-Logo, tudo isto pode ser copiado/colado e compilado em um único programa.
-Há um menu para escolha do exerćicio.
-Comentários contendo entradas e saídas dos exercícios estão abaixo das declarações de seus protótipos.
-Funçoes que determinados exercicios usam estão abaixo do comentário nos protótipos.
Grato!
*/

#include <stdio.h>
#include <stdlib.h>

void exercicio_1(void);
/* SAÍDA:
O endereco de var eh 0x7ffcb303aebc
O valor de varPtr eh 0x7ffcb303aebc
O valor de var e 7
O valor que varPtr aponta e 7
 Mostrando que * e & sao complementares 
 &* varPtr = 0x7ffcb303aebc
 *& varPtr = 0x7ffcb303aebc

 COMENTÁRIOS: O exercicio mostra, na primeira impressão, que o endereço de "var" 
e o valor de "varPtr" são os mesmos. Ou seja, "varPtr" é uma variavel que tem como valor 
o endereço de memória para "var".
    Na segunda impressão, é mostrado o valor de var e é usado o operador de ponteiro "*"(conteúdo de ),
para mostrar que o conteúdo do endereço apontado por varPtr é de fato o mesmo que o de var.
    Na terceira impressão, é mostrado que os dois operadores de referencia, "&",
e o que aponta o conteúdo do endereço, "*", retornam o mesmo valor quando são colocados
alternadamente em um expressão com varPtr. Isto ocorre pois o conteúdo do endereço de varPtr 
e o endereço do conteúdo de varPtr são os mesmos.
 */

void exercicio_2(void);
/*SAÍDA:
Insira os valores para trocar:
13 12
Troquei! ---> 12  13 */
void troca(int *a, int*b)
{
    int temp;
    temp = *a;
    *a = *b;
    *b = temp;
}


void exercicio_3(void);
/* Será impresso: 20 10, mesmo que a ordem dos argumentos na printf seja i,j,
pois os seus valores foram trocados utilizando ponteiros para seus endereços. */


void exercicio_4(void);
/*SAÍDA:
Insira dois valores para serem trocados:

12 45
 Troquei ----> 45 12
*/
void Troca(int *a, int*b)
{
    int temp;
    temp = *a;
    *a = *b;
    *b = temp;
}


void exercicio_5(void);
/*SAÍDA:
Entre com o seu nome e um sobrenome .
VLADIMIR LENIN
LENIN
*/
char* acheSobrenome(char *nome)
 {
    char *pnome;
    int i = 0;
    
    while (nome[i] != ' ') 
    {
        i++;
    }
    i++;
    pnome = &nome[i];
    return pnome;
}

void exercicio_6(void);
/*COMENTÁRIOS: O programa primeiro pede um valor inteiro para variavel "n", e depois retorna um ponteiro 
para uma memória alocada para n inteiros. Nesta memória são armazenadas n notas,
 e é calculada e impressa a média.
Incluí a divisão da soma das medias por n, que parecia estar faltando.

SAÍDA:
Digite o tamanho do vetor
5
Digite 5 valores para o vetor:
1
2
3
4
5
Media=3.000000*/


void exercicio_7(void);
/* COMENTÁRIOS:O programa realiza a mesma função do anterior,
porém, agora ele manipula o vetor utilizando o ponteiro da posição
inicial e incrementações, ao invés de índices.

SAÍDA:              
Digite o tamanho do vetor
5
Digite 5 valores para o vetor:
1
2
3
4
5
Media=3.000000
*/

void exercicio_8(void);
/*SEM MEMÓRIA, tamanho maximo= 3976200192 bytes 
ou 3883008 kilobytes
ou 3792 megabytes
ou 3.703 gigabytes */

void exercicio_9(void);
/*SAÍDA: Digite o tamanho do vetor
3
Digite 3 valores para o vetor:
4
4
10

Media=6.000000
E ha 1 numeros maiores que a media */

void exercicio_10(void);
/*SAÍDA:
Digite o tamanho do vetor
5
Digite 5 valores para o vetor:
8
7 
6
4
10
Media=7.000000
Notas crescentes:
   4   6   7   8  10
*/
int* ordena_vetor(int *pv,int n)
{
    int i,j,temp;
    for(i=0;i<n;i++)
    {
        for(j=0;j<n-i-1;j++)
        {
            if(*(pv+j)>*(pv+j+1))
            {
                temp=*(pv+j+1);
                *(pv+j+1)=*(pv+j);
                *(pv+j)=temp;
            }
        }
    }
    return pv;
}
void imprime_vetor(int *vetor, int tam)
{
    int i;
    for(i=0;i<tam;i++)
    {
        printf("%4d",*(vetor+i));

    }
}

void exercicio_11(void);
/*
Entre com um nome e um sobrenome:
[ENTRADA]:CARLOS MARIGHELLA
[SAIDA]:MARIGHELLA


COMENTÁRIO: O programa imprime, igualmente ao programa 5, a string digitada 
a partir do primeiro espaço. A diferença é que enquanto o programa 5 usa indexação de 
vetores para se referir aos endereços e conteúdos da string, este programa só incrementa 
o ponteiro para se "locomover" pela string.
*/
void misterio(char *n)
{
    while(*n != ' ') n++;
    n++;
    puts(n);
}

void exercicio_12(void);
/*A manipulação de um vetor dentro de uma função que recebeu um vetor como argumento
acaba realmente manipulando o vetor da função que a chamou.
SAÍDAS:

[ENTRADA]:13
 Teste  1
13
00000000000000000000000000001101

[ENTRADA]:9
 Teste  2
9
00000000000000000000000000001001
*/
void Converter(int numeroBase10,int numeroBase2[32])
{
    int alg=0;
    numeroBase10==1? (numeroBase2[31]=1):0;
    while(numeroBase10>=2)
    {
        numeroBase2[31-alg]=(numeroBase10%2);
        numeroBase10=numeroBase10/2;
        alg++;
    }
    numeroBase2[31-alg]=numeroBase10;

}


int valida_int(void)        
{
	int valido,lixo,valor;
	valido=scanf("%d",&valor);
        while(valido==0 || valor>12 || valor<0)
        {
            while((lixo=getchar())!= EOF && lixo != '\n');
            puts("\nInsira um valor válido: ");
            valido=scanf("%d",&valor);
        }
	return valor;
}
int main(int argc, char *argv[])
{   
    int opcao=-1;
    while(opcao!=0)
    {
        puts("\n\n\n[*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*]\n\n"
        "SELECIONE O EXERCÍCIO QUE VOCÊ DESEJA:\n"
        "[1] Exercício 1\n"
        "[2] Exercício 2\n"
        "[3] Exercício 3\n"
        "[4] Exercício 4\n"
        "[5] Exercicio 5\n"
        "[6] Exercicio 6\n"
        "[7] Exercício 7\n"
        "[8] Exercício 8\n"
        "[9] Exercicio 9\n"
        "[10] Exercicio 10\n"
        "[11] Exercício 11\n"
        "[12] Exercício 12\n"
        "Ou [0] para sair do programa.");
        opcao=valida_int();

        switch (opcao)
        {
            case 1:
                puts("\n\n[*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*]\n\n"
                "                   EXERCÍCIO 1\n\n");
                exercicio_1();
                break;
            
            case 2:
                puts("\n\n[*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*]\n\n"
                "                   EXERCÍCIO 2\n\n");
                exercicio_2();
                break;
            
            
            case 3:
                puts("\n\n[*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*]\n\n"
                "                   EXERCÍCIO 3\n\n");
                exercicio_3();
                break;
            
            
            case 4:
                puts("\n\n[*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*]\n\n"
                "                   EXERCÍCIO 4\n\n");
                exercicio_4();
                break;
            

            case 5:
                puts("\n\n[*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*]\n\n"
                "                   EXERCÍCIO 5\n\n");
                exercicio_5();
                break;
            

            case 6:
                puts("\n\n[*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*]\n\n"
                "                   EXERCÍCIO 6\n\n");
                exercicio_6();
                break;
            
            case 7:
                puts("\n\n[*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*]\n\n"
                "                   EXERCÍCIO 7\n\n");
                exercicio_7();
                break;
            
            case 8:
                puts("\n\n[*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*]\n\n"
                "                   EXERCÍCIO 8\n\n");
                exercicio_8();
                break;

            case 9:
                puts("\n\n[*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*]\n\n"
                "                   EXERCÍCIO 9\n\n");
                exercicio_9();
                break;
            
            case 10:
                puts("\n\n[*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*]\n\n"
                "                   EXERCÍCIO 10\n\n");
                exercicio_10();
                break;

            case 11:
                puts("\n\n[*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*]\n\n"
                "                   EXERCÍCIO 11\n\n");
                exercicio_11();
                break;

            case 12:
                puts("\n\n[*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*]\n\n"
                "                   EXERCÍCIO 12\n\n");
                exercicio_12();
                break;
            default:
                break;
        }
    }

    return 0; 
}

void exercicio_1(void)
{
    
int var; /* var e um inteiro */
int *varPtr; /* varPtr e um ponteiro para inteiros */
var = 7;
varPtr = & var ; /* varPtr aponta para onde esta var */
printf ("O endereco de var eh %p\n"
"O valor de varPtr eh %p\n", (void*)&var , (void*)varPtr );

printf ("O valor de var e %d\n"
"O valor que varPtr aponta e %d\n",
var,*varPtr);
/* Para os fortes */
printf (" Mostrando que * e & sao complementares \n"

" &* varPtr = %p\n"
" *& varPtr = %p\n",
(void*)&*varPtr , (void*)*&varPtr );

}
void exercicio_2(void)
{
    int x,y;
    puts("\nInsira os valores para trocar:");
    scanf("%d %d", &x,&y);
    troca(&x,&y);
    printf("Troquei! ---> %d  %d",x,y);
}
void exercicio_3(void)
{
    int i=10,j=20,temp;
    int *p1, *p2;

    p1=&i;
    p2=&j;
    temp = *p1;
    *p1 = *p2;
    *p2 = temp;
    printf("%d %d\n\n\n",i,j);

}
void exercicio_4(void)
{
    int x , y;
    int * px , * py ;
    /* Nao se usa isto normalmente . Isto é um exercício para aprendermos
    ponteiros */
    px = &x;
    py = &y;
    /*
    * Como seria o comando scanf com px e py ao inves x e y?
    * Dica : lembre - se que era scanf ("% d %d", &x , &y);
    * Agora olhe os dois comandos acima e verifique quem e igual
    * a &x e &y.
    */
    puts("Insira dois valores para serem trocados:\n");
    scanf("%d %d",px,py);
    /* Como seria Troca com px e py ? */
    Troca(px,py);
    /* Como seria printf com px e py ? */
    printf(" Troquei ----> %d %d\n",*px,*py);
}
void exercicio_5(void)
{
    char nomeCompleto[80];
    char *p;
    puts("\n Entre com o seu nome e um sobrenome .");
    getchar();
    scanf("%[^\n]s", nomeCompleto);
    p = acheSobrenome(nomeCompleto);
    puts(p);
}

void exercicio_6(void)
{
    int i,n, *pvetor;
    float media;
    puts("Digite o tamanho do vetor");
    scanf("%d", &n);
    pvetor = malloc(n*sizeof(int));
    if(!pvetor)
    {
        puts("Sem memória.");
        return;
    }

    printf("Digite %d valores para o vetor:\n",n);
    for(i=0;i<n;i++)
    {
        scanf("%d",&pvetor[i]);
    }

    media=0.0;
    for( i = 0; i < n; i++)
    {
        media+=pvetor[i];   
    }
    media=media/n;
    printf("Media=%f\n",media);
    
}

void exercicio_7(void)
{
    int i,n, *pvetor;
    float media;
    puts("Digite o tamanho do vetor");
    scanf("%d", &n);
    pvetor = malloc(n*sizeof(int));
    if(!pvetor)
    {
        puts("Sem memória.");
        return;
    }

    printf("Digite %d valores para o vetor:\n",n);
    for(i=0;i<n;i++)
    {
        scanf("%d",pvetor+i);
    }

    media=0.0;
    for( i = 0; i < n; i++)
    {
        media+=*(pvetor+i);   
    }
    media=media/n;
    printf("Media=%f\n",media);
    
}

void exercicio_8(void)
{
    
    unsigned long int i,mega=1024*1024;
    double tamanho=0.0;
    void* ptr;

    
    for(i=0;;i++)
    {
        ptr = malloc(i*mega);    
        if(!ptr)
        {
            break;
        }
        free(ptr);
    }

    free(ptr);
    tamanho=i-1;
    printf("SEM MEMÓRIA, tamanho maximo= %.f bytes \n"
    "ou %.f kilobytes\n"
    "ou %.f megabytes\n"
    "ou %.3f gigabytes\n"
    ,tamanho*1024*1024,tamanho*1024,tamanho,tamanho/1024);

}

void exercicio_9(void)
{
    int i,n, *pvetor,maiores=0;
    float media=0.0;
    puts("Digite o tamanho do vetor");
    scanf("%d", &n);
    pvetor = malloc(n*sizeof(int));
    if(!pvetor)
    {
        puts("Sem memória.");
        return;
    }

    printf("Digite %d valores para o vetor:\n",n);
    for(i=0;i<n;i++)
    {
        scanf("%d",pvetor+i);
        media+=*(pvetor+i);
    }
    media=media/n;
    for( i = 0; i < n; i++)
    {
        *(pvetor+i)>media? (maiores++): 0;
    }
    printf("\nMedia=%f\n"
    "E ha %d numeros maiores que a media",media,maiores);

    

}

void exercicio_10(void)
{
    int i,n, *pvetor;
    float media=0.0;
    puts("Digite o tamanho do vetor");
    scanf("%d", &n);
    pvetor = malloc(n*sizeof(int));
    if(!pvetor)
    {
        puts("Sem memória.");
        return;
    }

    printf("Digite %d valores para o vetor:\n",n);
    for(i=0;i<n;i++)
    {
        scanf("%d",pvetor+i);
        media+=*(pvetor+i);
    }
    ordena_vetor(pvetor,n);

    media=media/n;
    printf("\nMedia=%f\n",media);
    puts("Notas crescentes:\n");
    imprime_vetor(pvetor,n);
}
void exercicio_11(void) 
{
    char nome[41];
    puts("Entre com um nome e um sobrenome:");
    getchar();
    scanf("%[^\n]d",nome);

    misterio(nome);

}
void exercicio_12(void)
{


    int nb10, nb2[32] ,i ,teste = 1;
   
    

    while (1)
    {
        for ( i = 0; i < 32; i++)
        {
            nb2[i]=0;
        }

        scanf ("%d", &nb10 );
        if(nb10<0) break;
        /*
        * Como a funcao e void nao ha valor retornado
        * e portanto nao posso atribuir a nenhuma variavel
        */
        Converter(nb10,nb2);
        printf (" Teste % d\n", teste ++) ;
        printf ("%d\n", nb10 );
        for(i=0;i<32;i++)
        {
            printf("%d",nb2[i]);
        }
        /* Aqui falta codigo */
        printf ("\n\n");
    }
}



