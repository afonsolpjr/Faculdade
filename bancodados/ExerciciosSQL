/* Exercício 1

• Recuperar o primeiro nome e a
data de nascimento de todos os
funcionários. */

SELECT Pnome,Datanasc
FROM Funcionario


-- Exercício 2


-- • Recuperar o Cpf dos funcionários
-- com salário inferior a 30.000 reais.

SELECT Cpf
FROM Funcionario
WHERE Salario<30000;

-- Exercício 3

-- • Recuperar o nome (Pnome, Minicial, Unome)
-- e o endereço de todos os funcionários que
-- trabalham para o departamento “Pesquisa”.

SELECT Pnome,Minicial,Unome 
FROM Funcionario,Departamento
WHERE Dnome='Pesquisa' and Dnr=Dnumero;


-- Exercício 4


--  Para cada projeto localizado em “Maua”, liste o
-- número do projeto, o número do departamento
-- que o controla e o último nome, endereço e data
-- de nascimento do gerente do departamento.

SELECT Projnumero,Dnumero,Unome ,Endereco,Datanasc
FROM Projeto,Funcionario,Departamento
WHERE Projlocal='Maua' 
    AND Dnum=Dnumero
    AND Cpf_gerente = Cpf; 

-- Exercício Extra

-- • Recuperar o nome e a localização dos
-- departamentos cuja localização inicia pela
-- letra ‘S’. Apresentar os resultados ordenados
-- crescentemente pelo nome do departamento.

SELECT Dnome,Dlocal
FROM Departamento NATURAL JOIN Localizacao_Dep
WHERE Dlocal like 'S%' 
ORDER BY Dnome;

-- Aula 14:

-- Exercício 3

-- • Recuperar o nome (Pnome, Minicial, Unome) e o
-- endereço de todos os funcionários que trabalham
-- para o departamento “Pesquisa”. (Resolver usando
-- join)

SELECT Pnome,Minicial,Unome,Endereco
FROM Funcionario JOIN Departamento 
    ON Dnr=Dnumero and Dnome='Pesquisa'

-- Exercício 4

-- • Para cada projeto localizado em “Maua”, liste o
-- número do projeto, o número do departamento
-- que o controla e o último nome, endereço e data de
-- nascimento do gerente do departamento.
-- (Resolver usando join)

SELECT Projnumero,Dnumero,Unome,Endereco,Datanasc
FROM Projeto JOIN Departamento JOIN Funcionario as Gerente
    ON Projlocal = 'Maua'
    AND Dnum=Dnumero
    AND Cpf_gerente = Gerente.Cpf

-- Exercício 5

-- • Fazer uma lista dos números de projeto para
-- aqueles que envolvem um funcionário cujo último
-- nome é “Silva”, seja como um trabalhador ou
-- como um gerente do departamento que controla
-- o projeto.

-- Projetos em que silva trabalha UNIAO Projetos que Silva é gerente do Dep
(
    SELECT Pnr 
    FROM Funcionario as Silva JOIN Trabalha_em
        ON Silva.Unome='Silva'
        AND Fcpf = Silva.Cpf
) 
UNION
(
    SELECT Projnumero
    FROM Funcionario as Silva JOIN Departamento JOIN Projeto
        ON Silva.Unome='Silva'
        AND Dnum = Dnumero
        AND Silva.Cpf = Cpf_gerente
)

-- Exercício 6

-- • Listar os nomes dos gerentes que têm pelo
-- menos um dependente.
-- (Apresentar 3 soluções – uma usando uma das junções externas, outra
-- usando uma das operações sobre conjuntos (que não rodará no MySQL)
-- e a última usando subconsultas aninhadas)

-- Usando junção...... na verdade não sei onde usar uma junção externa aqui.
SELECT DISTINCT Pnome,Minicial,Unome
FROM Funcionario JOIN Departamento JOIN Dependente
    ON Cpf=Cpf_gerente
    AND Cpf=Fcpf;

-- Operações sobre conjuntos (Gerentes - Gerentes sem dependentes)
(
    SELECT Pnome,Minicial,Unome
    FROM Funcionario JOIN Departamento
        ON Cpf=Cpf_gerente
)
EXCEPT
(
    SELECT Pnome,Minicial,Unome
    FROM Funcionario JOIN Departamento 
            ON Cpf=Cpf_gerente
        LEFT JOIN Dependente
            ON Cpf=Fcpf
    WHERE Nome_dependente is NULL
)
--Subconsultas Aninhadas 
-- Gerentes que estejam entre funcionarios com dependentes 

SELECT Pnome,Minicial,Unome
FROM Funcionario JOIN Departamento
    ON Cpf=Cpf_gerente
WHERE (Pnome,Minicial,Unome) IN 
    (
        SELECT Pnome,Minicial,Unome
        FROM Funcionario JOIN Dependente
            ON Cpf=Fcpf
    )


-- Exercício 7

-- • Recuperar os nomes dos funcionários que não
-- possuem dependentes.
-- (Apresentar 3 soluções – uma usando uma das junções externas,
-- outra usando uma das operações sobre conjuntos (que não rodará
-- no MySQL) e a última usando subconsultas aninhadas)
            
-- Juncao externa é mole

SELECT Pnome,Minicial,Unome
FROM Funcionario LEFT JOIN Dependente
    ON Cpf=Fcpf
WHERE Nome_dependente is NULL

-- Operações sobre conjuntos (Funcionarios - quem tem dependente)

(
    SELECT  Pnome,Minicial,Unome
    FROM Funcionario
)
EXCEPT
(
    SELECT  Pnome,Minicial,Unome
    FROM Funcionario JOIN Dependente
        ON Cpf=Fcpf
);

-- subconsultas aninhadas
SELECT  Pnome,Minicial,Unome
FROM Funcionario
WHERE (Pnome,Minicial,Unome) NOT IN
(
    SELECT  Pnome,Minicial,Unome
    FROM Funcionario JOIN Dependente
        ON Cpf=Fcpf
);

--Exercício 9

-- • Descobrir o valor total da folha de
-- pagamento dessa empresa (soma dos
-- salários de todos os funcionários).

SELECT SUM(Salario)
FROM Funcionario;

-- Exercício 10

-- • Descobrir o valor do menor salário
-- recebido por departamento.

SELECT Dnome,Dnr,MIN(Salario)
FROM Funcionario JOIN Departamento
    ON Dnr=Dnumero
GROUP BY Dnr;

-- Exercício 11

-- Listar os nomes de todos os
-- funcionários com dois ou mais
-- dependentes.

SELECT Pnome,Minicial,Unome, COUNT( DISTINCT Nome_dependente) as Qtd_dep
FROM Funcionario JOIN Dependente
    ON Cpf=Fcpf
GROUP BY Pnome,Minicial,Unome
HAVING Qtd_dep >=2;


-- Não gerentes que ganham maior que algum gerente (nao existe)

SELECT Pnome, Salario
FROM Funcionario LEFT JOIN Departamento 
    ON Cpf=Cpf_gerente
WHERE Cpf_gerente is NULL 
    AND Salario > SOME (
    SELECT Salario
    FROM Funcionario JOIN Departamento
        ON Cpf=Cpf_gerente 
        );

-- Ex.: Achar dentre todos os departamentos, o
-- máximo do salário total (de algum dos
-- departamentos)
-- (entendi como: o maior salario total de um departamento)

SELECT MAX(Salario_total) as Max_Salario_Dept
FROM (
    SELECT Dnr,Dnome,SUM(Salario) as Salario_total
    FROM Funcionario JOIN Departamento
        ON Dnr=Dnumero
    GROUP BY Dnr
) AS Salario_Dept;

-- Exercício 8
-- • Descobrir os nomes dos funcionários que
-- trabalham em todos os projetos controlados
-- pelo departamento número 5.

-- Logica: Selecione o funcionario cuja diferença entre projetos do dep5 
--  e os que eles trabalham não exista

SELECT DISTINCT Pnome,Minicial,Unome
FROM Funcionario as F JOIN Trabalha_em
    ON F.Cpf=Fcpf
WHERE NOT EXISTS (
    (
    SELECT Projnumero
    FROM Projeto
    WHERE Dnum=5
    )
    EXCEPT
    (
        SELECT Pnr
        FROM Trabalha_em
        WHERE Fcpf=F.cpf
    )
)

-- Exercício 12
-- • Retornar os nomes dos funcionários cujo
-- salário é maior do que o salário de todos os
-- funcionários do departamento 5.

SELECT DISTINCT Pnome,Minicial,Unome
FROM Funcionario
WHERE SALARIO > ALL (
    SELECT Salario
    FROM funcionario
    WHERE Dnr=5
);

-- Exercício 13
-- • Recuperar o nome de cada funcionário
-- que tem pelo menos um dependente que
-- seja do parentesco filho(a).

SELECT DISTINCT Pnome,Minicial,Unome
FROM Funcionario JOIN Dependente
    ON Fcpf=Cpf
WHERE Parentesco LIKE 'Filh_';


-- qual maior sexo na empresa?
-- ficou horrivel
SELECT Sexo
FROM (
    SELECT Sexo,COUNT(Sexo) as Frequencia
    FROM Funcionario
    GROUP BY Sexo
) as Pesquisa
WHERE Pesquisa.Frequencia >= ALL (
    SELECT COUNT(Sexo) as Frequencia
    FROM Funcionario
    GROUP BY Sexo
)

SELECT Sexo, COUNT(*) AS occurrences
FROM Funcionario
GROUP BY Sexo
ORDER BY occurrences DESC LIMIT 1;









-- criar visão de professor e departamento

CREATE VIEW Prof_Dept AS(
    SELECT Nome,Nome_Depto
    FROM Professor NATURAL JOIN Departamento
);

CREATE VIEW Salario_Dept AS (
    SELECT ID_Depto, SUM(Salario) as Salario_total
    FROM Professor NATURAL JOIN Departamento
    GROUP BY ID_Depto
);

--Criacao de BD

create table Departamento(
    Nome_Depto varchar(50) not null,
    ID_Depto numeric(5,0),
    primary key (ID_Depto) );

create table Professor (

    ID_Professor numeric(5,0),
    Nome varchar(50) not null,
    CPF char(11),
    Salario numeric(8,2),
    ID_Depto numeric(5,0),
    unique (CPF),
    primary key (ID_Professor),
    constraint fk_depto_prof foreign key (ID_Depto) references Departamento(ID_Depto) 
    );

insert into Departamento values
('Departamento de Física', 17),
('Departamento de Informática', 21),
('Departamento de Letras', 30);

insert into Professor values
(1, 'Silva', '11111111111', 8000.00, 30),
(2, 'Souza', '22222222222', 5400.00, 17),
(3, 'Costa', '33333333333', 10000.00, 21),
(4, 'Gomes', '44444444444', 5200.00, 17),
(5, 'Lima', '55555555555', 8700.00, 21);

CREATE TABLE teams(
    id INTEGER NOT NULL,
    name VARCHAR(50),
    primary key(id)
);

CREATE TABLE matches(
    id INTEGER NOT NULL,
    team_1 INTEGER NOT NULL,
    team_2 INTEGER NOT NULL,
    team_1_goals INTEGER,
    team_2_goals INTEGER,
    CONSTRAINT FK_team1 FOREIGN KEY (team_1) REFERENCES teams(id),
    CONSTRAINT FK_team2 FOREIGN KEY (team_2) REFERENCES teams(id),
    PRIMARY KEY (id)
);

INSERT INTO teams
VALUES
(1,'CEARA'),
(2,'FORTALEZA'),
(3,'GUARANY DE SOBRAL'),
(4,'FLORESTA');

INSERT INTO matches VALUES
(1,4,1,0,4),
(2,3,2,0,1),
(3,1,3,3,0),
(4,3,4,0,1),
(5,1,2,0,0),
(6,2,4,2,1);

CREATE VIEW resultados AS
SELECT t1.id AS t1_id,t2.id AS t2_id,team_1_goals-team_2_goals AS result1,team_2_goals-team_1_goals AS result2
FROM teams as t1 JOIN teams as t2 JOIN matches
    ON t1.id=team_1 AND t2.id=team_2;

CREATE VIEW v1 AS 
    SELECT t1_id,COUNT(result1) as vitorias
    FROM resultados
    WHERE result1>0
    GROUP BY t1_id;

CREATE VIEW v2 AS
    SELECT t2_id,COUNT(result1) as vitorias
    FROM resultados
    WHERE result2>0
    GROUP BY t2_id;

CREATE VIEW d1 AS 
    SELECT t1_id,COUNT(result1) as derrotas
    FROM resultados
    WHERE result1<0
    GROUP BY t1_id;

CREATE VIEW d2 AS
    SELECT t2_id,COUNT(result2) as derrotas
    FROM resultados
    WHERE result2<0
    GROUP BY t2_id;

CREATE VIEW e1 AS 
    SELECT t1_id,COUNT(result1) as empates
    FROM resultados
    WHERE result1=0
    GROUP BY t1_id;

CREATE VIEW e2 AS
    SELECT t2_id,COUNT(result2) as empates
    FROM resultados
    WHERE result2=0
    GROUP BY t2_id;

CREATE VIEW vitorias AS 
    SELECT id, IFNULL(v1.vitorias + v2.vitorias,0)
    FROM teams LEFT JOIN v1 
        ON id = v1.t1_id    LEFT JOIN v2
        ON id = v2.t2_id;

CREATE VIEW derrotas AS
    SELECT id, IFNULL(d1.derrotas + d2.derrotas,0)
    FROM teams LEFT JOIN v1 
        ON id = v1.t1_id    LEFT JOIN v2
        ON id = v2.t2_id;

SELECT name,orders.id
FROM customers JOIN orders
    ON customers.id = id_customers
WHERE orders.id IN (
    SELECT id
    FROM orders
    WHERE orders_date < '2016-07-01') ;
    
-- Transações e triggers

CREATE TABLE produto(
    id INT,
    nome VARCHAR(50),
    qtd_estoque INT NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE venda(
    id_nota INT,
    id_produto INT,
    qtd INT,
    PRIMARY KEY (id_nota,id_produto),
    FOREIGN KEY (id_produto) REFERENCES produto(id)
);

INSERT INTO produto VALUES (1, 'Produto A', 50);
INSERT INTO produto VALUES (2, 'Produto B', 10);
INSERT INTO produto VALUES (3, 'Produto C', 5);


DELIMITER $$

CREATE TRIGGER insert_venda
AFTER INSERT ON venda
FOR EACH ROW
BEGIN
    UPDATE produto
    SET qtd_estoque = qtd_estoque - NEW.qtd
    WHERE id = NEW.id_produto;
END$$

CREATE TRIGGER delete_venda
AFTER DELETE ON venda
FOR EACH ROW
BEGIN
    UPDATE produto
    SET qtd_estoque = qtd_estoque + OLD.qtd
    WHERE id = OLD.id_produto;
END$$

DELIMITER ;

-- • Um novo gatilho que não permite que um
-- produto seja vendido caso a quantidade em
-- estoque não seja suficiente para atender o
-- pedido.


DELIMITER $$

CREATE TRIGGER checa_estoque
BEFORE UPDATE ON produto
FOR EACH ROW
BEGIN
    IF NEW.qtd_estoque < 0  THEN
        signal sqlstate '45000' SET message_text =
        'Nao ha produto suficiente em estoque para atender o
        pedido, venda nao pode ser realizada.';
    END IF;
END$$

DELIMITER ; $$

-- Exercício 2

-- a) Modificar a relação Produto incluindo um atributo que
-- indique qual a quantidade máxima por venda de cada
-- produto.


ALTER TABLE produto(
    ADD max_venda INT DEFAULT 10
)



-- b) Criar um novo trigger que não permita a venda de um
-- produto caso a quantidade máxima solicitada seja
-- excedida.

DELIMITER $$ 
CREATE TRIGGER max_qtd_venda
BEFORE INSERT ON venda
FOR EACH ROW
BEGIN
    IF NEW.qtd >10 THEN
        signal sqlstate '45000' SET message_text = 'Não é possível realizar a venda.
         A quantidade de produtos na venda excede a máxima permitida.';
    END IF;
END$$
DELIMITER ; $$
-- c) Criar uma visão produto_quant contendo o nome e a
-- quantidade em estoque dos produtos.

CREATE VIEW produto_quant AS
    (SELECT nome,qtd_estoque
    FROM produto);

-- d) Criar um usuário jose no servidor localhost com a senha
-- '2023'. Dar permissão para que esse usuário faça
-- consultas (select) sobre a visão criada.

CREATE USER 'jose'@'localhost'
IDENTIFIED BY '2023';

GRANT SELECT ON vendas.produto_quant TO 'jose'@'localhost';